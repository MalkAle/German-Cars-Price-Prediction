name: Connect to an AWS role from a GitHub repository

on:
  push:
    branches: [ dev, main ]

env:
  AWS_REGION: eu-central-1  # Change to reflect your Region
  ECR_REPOSITORY: german_cars_app 
  CONTAINER_NAME: "german_cars_app"
  ECS_SERVICE: german_cars_app
  ECS_CLUSTER: german_cars_app
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json

jobs:
  RepoCloneGit:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

  ConfigAWSCreds:
    needs: RepoCloneGit
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::339713185538:role/Github-role
          role-session-name: Github-role
          aws-region: ${{ env.AWS_REGION }}

  BuildPushECR:
    needs: ConfigAWSCreds
    runs-on: ubuntu-latest
    steps:
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  DeployECS:
    needs: BuildPushECR
    runs-on: ubuntu-latest
    steps:
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.BuildPushECR.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
